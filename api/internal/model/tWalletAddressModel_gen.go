// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tWalletAddressFieldNames          = builder.RawFieldNames(&TWalletAddress{})
	tWalletAddressRows                = strings.Join(tWalletAddressFieldNames, ",")
	tWalletAddressRowsExpectAutoSet   = strings.Join(stringx.Remove(tWalletAddressFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tWalletAddressRowsWithPlaceHolder = strings.Join(stringx.Remove(tWalletAddressFieldNames, "`dauth_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	tWalletAddressModel interface {
		Insert(ctx context.Context, data *TWalletAddress) (sql.Result, error)
		FindOne(ctx context.Context, dauthId string) (*TWalletAddress, error)
		Update(ctx context.Context, data *TWalletAddress) error
		Delete(ctx context.Context, dauthId string) error
	}

	defaultTWalletAddressModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TWalletAddress struct {
		DauthId    string    `db:"dauth_id"` // id of dauth
		Address    string    `db:"address"`  // The user address
		Secret     string    `db:"secret"`   // The user secret
		Words      string    `db:"words"`    // The user mnemonics
		CreateTime time.Time `db:"create_time"`
	}
)

func newTWalletAddressModel(conn sqlx.SqlConn) *defaultTWalletAddressModel {
	return &defaultTWalletAddressModel{
		conn:  conn,
		table: "`t_wallet_address`",
	}
}

func (m *defaultTWalletAddressModel) Delete(ctx context.Context, dauthId string) error {
	query := fmt.Sprintf("delete from %s where `dauth_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, dauthId)
	return err
}

func (m *defaultTWalletAddressModel) FindOne(ctx context.Context, dauthId string) (*TWalletAddress, error) {
	query := fmt.Sprintf("select %s from %s where `dauth_id` = ? limit 1", tWalletAddressRows, m.table)
	var resp TWalletAddress
	err := m.conn.QueryRowCtx(ctx, &resp, query, dauthId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTWalletAddressModel) Insert(ctx context.Context, data *TWalletAddress) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, tWalletAddressRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DauthId, data.Address, data.Secret, data.Words)
	return ret, err
}

func (m *defaultTWalletAddressModel) Update(ctx context.Context, data *TWalletAddress) error {
	query := fmt.Sprintf("update %s set %s where `dauth_id` = ?", m.table, tWalletAddressRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Address, data.Secret, data.Words, data.DauthId)
	return err
}

func (m *defaultTWalletAddressModel) tableName() string {
	return m.table
}
